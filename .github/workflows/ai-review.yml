name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR files
        id: get-files
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const processedFiles = files.map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              changes: file.changes,
              patch: file.patch || '',
              file_type: file.filename.split('.').pop() || 'unknown',
              is_binary: file.filename.match(/\.(jpg|jpeg|png|gif|ico|svg|pdf|zip|tar|gz|exe|dll|so|dylib)$/i) ? true : false,
              size: file.patch ? file.patch.length : 0
            }));
            
            return processedFiles;

      - name: Call AI Review API
        id: ai-review
        run: |
          cat > payload.json << 'EOF'
          {
            "pr_title": "${{ github.event.pull_request.title }}",
            "pr_body": "${{ github.event.pull_request.body }}",
            "pr_number": ${{ github.event.pull_request.number }},
            "pr_url": "${{ github.event.pull_request.html_url }}",
            "files": ${{ steps.get-files.outputs.result }},
            "preferences": {
              "focus_security": true,
              "focus_performance": false,
              "strict_style": false
            }
          }
          EOF
          
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d @payload.json \
            ${{ secrets.AI_REVIEWER_URL }}/review)
          
          echo "response=$response" >> $GITHUB_OUTPUT
          
          markdown_report=$(echo "$response" | jq -r '.markdown_report // empty')
          if [ -n "$markdown_report" ]; then
            echo "markdown_report<<EOF" >> $GITHUB_OUTPUT
            echo "$markdown_report" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          approval=$(echo "$response" | jq -r '.review.approval // "COMMENT"')
          echo "approval=$approval" >> $GITHUB_OUTPUT
          
          security_score=$(echo "$response" | jq -r '.review.security_score // 0')
          quality_score=$(echo "$response" | jq -r '.review.quality_score // 0')
          echo "security_score=$security_score" >> $GITHUB_OUTPUT
          echo "quality_score=$quality_score" >> $GITHUB_OUTPUT

      - name: Create review comment
        if: steps.ai-review.outputs.markdown_report != ''
        uses: actions/github-script@v7
        with:
          script: |
            const markdownReport = `${{ steps.ai-review.outputs.markdown_report }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: markdownReport
            });

      - name: Set PR status check
        uses: actions/github-script@v7
        with:
          script: |
            const approval = '${{ steps.ai-review.outputs.approval }}';
            const securityScore = parseInt('${{ steps.ai-review.outputs.security_score }}');
            const qualityScore = parseInt('${{ steps.ai-review.outputs.quality_score }}');
            
            let state = 'success';
            let description = 'AI review completed successfully';
            
            if (approval === 'REQUEST_CHANGES') {
              state = 'failure';
              description = 'AI review found issues that need attention';
            } else if (securityScore < 70 || qualityScore < 70) {
              state = 'pending';
              description = 'AI review suggests improvements';
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'AI Code Review',
              target_url: '${{ github.event.pull_request.html_url }}'
            });

      - name: Save review report as artifact
        if: steps.ai-review.outputs.markdown_report != ''
        run: |
          mkdir -p ai-reviews
          echo '${{ steps.ai-review.outputs.markdown_report }}' > "ai-reviews/pr-${{ github.event.pull_request.number }}-review.md"

      - name: Upload review artifact
        if: steps.ai-review.outputs.markdown_report != ''
        uses: actions/upload-artifact@v4
        with:
          name: ai-review-pr-${{ github.event.pull_request.number }}
          path: ai-reviews/
          retention-days: 30

      - name: Handle API errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ‚ùå AI Code Review Failed
              
              The automated AI code review could not be completed. This may be due to:
              - Service unavailability
              - API rate limits
              - Network issues
              
              Please review this PR manually or try triggering the review again.
              
              *Generated at: ${new Date().toISOString()}*`
            });
